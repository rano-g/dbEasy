import twilio from 'twilio';

const accountSid = process.env.TWILIO_ACCOUNT_SID;
const authToken = process.env.TWILIO_AUTH_TOKEN;
const whatsappNumber = process.env.TWILIO_WHATSAPP_NUMBER; // e.g., 'whatsapp:+14155238886'

export const twilioClient = twilio(accountSid, authToken);

export interface WhatsAppMessage {
  to: string;
  body: string;
  mediaUrl?: string;
  language?: string;
}

export interface CreditReportRequest {
  phoneNumber: string;
  name: string;
  language: string;
  requestType: 'full_report' | 'score_only' | 'data_verification';
}

// Send WhatsApp message via Twilio
export async function sendWhatsAppMessage(message: WhatsAppMessage): Promise<any> {
  try {
    const response = await twilioClient.messages.create({
      body: message.body,
      from: whatsappNumber,
      to: `whatsapp:${message.to}`,
      ...(message.mediaUrl && { mediaUrl: [message.mediaUrl] })
    });
    return response;
  } catch (error) {
    console.error('Error sending WhatsApp message:', error);
    throw error;
  }
}

// Handle incoming WhatsApp messages
export async function handleIncomingWhatsAppMessage(
  from: string,
  body: string,
  language: string = 'en'
): Promise<string> {
  const phoneNumber = from.replace('whatsapp:', '');
  
  // Parse user intent from message
  const intent = parseUserIntent(body.toLowerCase(), language);
  
  switch (intent.type) {
    case 'credit_score_request':
      return await handleCreditScoreRequest(phoneNumber, language);
    
    case 'data_source_connect':
      return await handleDataSourceConnection(phoneNumber, intent.dataSource, language);
    
    case 'report_request':
      return await handleReportRequest(phoneNumber, language);
    
    case 'help':
      return getHelpMessage(language);
    
    case 'language_change':
      return await handleLanguageChange(phoneNumber, intent.language);
    
    default:
      return getWelcomeMessage(language);
  }
}

// Parse user intent from message
function parseUserIntent(message: string, language: string): any {
  // English commands
  if (language === 'en') {
    if (message.includes('credit score') || message.includes('score')) {
      return { type: 'credit_score_request' };
    }
    if (message.includes('connect bank') || message.includes('add bank')) {
      return { type: 'data_source_connect', dataSource: 'bank' };
    }
    if (message.includes('full report') || message.includes('report')) {
      return { type: 'report_request' };
    }
    if (message.includes('help') || message.includes('support')) {
      return { type: 'help' };
    }
  }
  
  // Hindi commands
  if (language === 'hi') {
    if (message.includes('рдХреНрд░реЗрдбрд┐рдЯ рд╕реНрдХреЛрд░') || message.includes('рд╕реНрдХреЛрд░')) {
      return { type: 'credit_score_request' };
    }
    if (message.includes('рдмреИрдВрдХ рдЬреЛрдбрд╝реЗрдВ') || message.includes('рдмреИрдВрдХ рдХрдиреЗрдХреНрдЯ')) {
      return { type: 'data_source_connect', dataSource: 'bank' };
    }
    if (message.includes('рдкреВрд░реА рд░рд┐рдкреЛрд░реНрдЯ') || message.includes('рд░рд┐рдкреЛрд░реНрдЯ')) {
      return { type: 'report_request' };
    }
    if (message.includes('рдорджрдж') || message.includes('рд╕рд╣рд╛рдпрддрд╛')) {
      return { type: 'help' };
    }
  }
  
  // Bengali commands
  if (language === 'bn') {
    if (message.includes('ржХрзНрж░рзЗржбрж┐ржЯ рж╕рзНржХрзЛрж░') || message.includes('рж╕рзНржХрзЛрж░')) {
      return { type: 'credit_score_request' };
    }
    if (message.includes('ржмрзНржпрж╛ржВржХ ржпрзЛржЧ') || message.includes('ржмрзНржпрж╛ржВржХ рж╕ржВржпрзЛржЧ')) {
      return { type: 'data_source_connect', dataSource: 'bank' };
    }
    if (message.includes('рж╕ржорзНржкрзВрж░рзНржг рж░рж┐ржкрзЛрж░рзНржЯ') || message.includes('рж░рж┐ржкрзЛрж░рзНржЯ')) {
      return { type: 'report_request' };
    }
    if (message.includes('рж╕рж╛рж╣рж╛ржпрзНржп')) {
      return { type: 'help' };
    }
  }
  
  return { type: 'unknown' };
}

// Message templates for different languages
export const messageTemplates = {
  en: {
    welcome: `ЁЯПж Welcome to dbEasy Credit Reporting!

I can help you with:
ЁЯУК Check your credit score
ЁЯФЧ Connect bank accounts
ЁЯУЛ Get full credit report
тЭУ Get help and support

Just type what you need!`,
    
    creditScore: `ЁЯУК Your Credit Score: {{score}}
ЁЯУЕ Last Updated: {{date}}
ЁЯУИ Score Range: 300-850

To improve your score:
тЬЕ Pay bills on time
тЬЕ Keep credit utilization low
тЬЕ Add more data sources

Type "full report" for detailed analysis.`,
    
    dataSourceHelp: `ЁЯФЧ Connect Your Data Sources:

1. Bank Accounts - Link your bank for transaction history
2. UPI Payments - Connect Google Pay, PhonePe, Paytm
3. Utility Bills - Add electricity, water, gas bills
4. Mobile Recharge - Track mobile payment history

Reply with "connect bank" to start!`,
    
    help: `тЭУ dbEasy Help & Support

Available Commands:
ЁЯУК "credit score" - Check your score
ЁЯУЛ "report" - Get full credit report
ЁЯФЧ "connect bank" - Add data sources
ЁЯМР "help" - Show this menu
ЁЯЧгя╕П "hindi" - Switch to Hindi

Visit: https://dbeasy.app for more features!`
  },
  
  hi: {
    welcome: `ЁЯПж dbEasy рдХреНрд░реЗрдбрд┐рдЯ рд░рд┐рдкреЛрд░реНрдЯрд┐рдВрдЧ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!

рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:
ЁЯУК рдЕрдкрдирд╛ рдХреНрд░реЗрдбрд┐рдЯ рд╕реНрдХреЛрд░ рдЪреЗрдХ рдХрд░реЗрдВ
ЁЯФЧ рдмреИрдВрдХ рдЦрд╛рддреЗ рдЬреЛрдбрд╝реЗрдВ
ЁЯУЛ рдкреВрд░реА рдХреНрд░реЗрдбрд┐рдЯ рд░рд┐рдкреЛрд░реНрдЯ рдкрд╛рдПрдВ
тЭУ рдорджрдж рдФрд░ рд╕рд╣рд╛рдпрддрд╛ рдкрд╛рдПрдВ

рдмрд╕ рд▓рд┐рдЦреЗрдВ рдХрд┐ рдЖрдкрдХреЛ рдХреНрдпрд╛ рдЪрд╛рд╣рд┐рдП!`,
    
    creditScore: `ЁЯУК рдЖрдкрдХрд╛ рдХреНрд░реЗрдбрд┐рдЯ рд╕реНрдХреЛрд░: {{score}}
ЁЯУЕ рдЕрдВрддрд┐рдо рдЕрдкрдбреЗрдЯ: {{date}}
ЁЯУИ рд╕реНрдХреЛрд░ рд░реЗрдВрдЬ: 300-850

рдЕрдкрдирд╛ рд╕реНрдХреЛрд░ рдмреЗрд╣рддрд░ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП:
тЬЕ рд╕рдордп рдкрд░ рдмрд┐рд▓ рдХрд╛ рднреБрдЧрддрд╛рди рдХрд░реЗрдВ
тЬЕ рдХреНрд░реЗрдбрд┐рдЯ рдЙрдкрдпреЛрдЧ рдХрдо рд░рдЦреЗрдВ
тЬЕ рдЕрдзрд┐рдХ рдбреЗрдЯрд╛ рд╕реНрд░реЛрдд рдЬреЛрдбрд╝реЗрдВ

рд╡рд┐рд╕реНрддреГрдд рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХреЗ рд▓рд┐рдП "рдкреВрд░реА рд░рд┐рдкреЛрд░реНрдЯ" рдЯрд╛рдЗрдк рдХрд░реЗрдВред`,
    
    dataSourceHelp: `ЁЯФЧ рдЕрдкрдиреЗ рдбреЗрдЯрд╛ рд╕реНрд░реЛрдд рдЬреЛрдбрд╝реЗрдВ:

1. рдмреИрдВрдХ рдЦрд╛рддреЗ - рд▓реЗрдирджреЗрди рдЗрддрд┐рд╣рд╛рд╕ рдХреЗ рд▓рд┐рдП рдмреИрдВрдХ рдЬреЛрдбрд╝реЗрдВ
2. UPI рднреБрдЧрддрд╛рди - Google Pay, PhonePe, Paytm рдЬреЛрдбрд╝реЗрдВ
3. рдЙрдкрдпреЛрдЧрд┐рддрд╛ рдмрд┐рд▓ - рдмрд┐рдЬрд▓реА, рдкрд╛рдиреА, рдЧреИрд╕ рдмрд┐рд▓ рдЬреЛрдбрд╝реЗрдВ
4. рдореЛрдмрд╛рдЗрд▓ рд░рд┐рдЪрд╛рд░реНрдЬ - рдореЛрдмрд╛рдЗрд▓ рднреБрдЧрддрд╛рди рдЗрддрд┐рд╣рд╛рд╕ рдЯреНрд░реИрдХ рдХрд░реЗрдВ

рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП "рдмреИрдВрдХ рдЬреЛрдбрд╝реЗрдВ" рдХрд╛ рдЬрд╡рд╛рдм рджреЗрдВ!`,
    
    help: `тЭУ dbEasy рдорджрдж рдФрд░ рд╕рд╣рд╛рдпрддрд╛

рдЙрдкрд▓рдмреНрдз рдХрдорд╛рдВрдб:
ЁЯУК "рдХреНрд░реЗрдбрд┐рдЯ рд╕реНрдХреЛрд░" - рдЕрдкрдирд╛ рд╕реНрдХреЛрд░ рдЪреЗрдХ рдХрд░реЗрдВ
ЁЯУЛ "рд░рд┐рдкреЛрд░реНрдЯ" - рдкреВрд░реА рдХреНрд░реЗрдбрд┐рдЯ рд░рд┐рдкреЛрд░реНрдЯ рдкрд╛рдПрдВ
ЁЯФЧ "рдмреИрдВрдХ рдЬреЛрдбрд╝реЗрдВ" - рдбреЗрдЯрд╛ рд╕реНрд░реЛрдд рдЬреЛрдбрд╝реЗрдВ
ЁЯМР "рдорджрдж" - рдпрд╣ рдореЗрдиреВ рджрд┐рдЦрд╛рдПрдВ
ЁЯЧгя╕П "english" - рдЕрдВрдЧреНрд░реЗрдЬреА рдореЗрдВ рд╕реНрд╡рд┐рдЪ рдХрд░реЗрдВ

рдЕрдзрд┐рдХ рд╕реБрд╡рд┐рдзрд╛рдУрдВ рдХреЗ рд▓рд┐рдП: https://dbeasy.app рдкрд░ рдЬрд╛рдПрдВ!`
  },
  
  bn: {
    welcome: `ЁЯПж dbEasy ржХрзНрж░рзЗржбрж┐ржЯ рж░рж┐ржкрзЛрж░рзНржЯрж┐ржВ-ржП ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржо!

ржЖржорж┐ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐:
ЁЯУК ржЖржкржирж╛рж░ ржХрзНрж░рзЗржбрж┐ржЯ рж╕рзНржХрзЛрж░ ржЪрзЗржХ ржХрж░рзБржи
ЁЯФЧ ржмрзНржпрж╛ржВржХ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржпрзЛржЧ ржХрж░рзБржи
ЁЯУЛ рж╕ржорзНржкрзВрж░рзНржг ржХрзНрж░рзЗржбрж┐ржЯ рж░рж┐ржкрзЛрж░рзНржЯ ржкрж╛ржи
тЭУ рж╕рж╛рж╣рж╛ржпрзНржп ржПржмржВ рж╕рж╣рж╛ржпрж╝рждрж╛ ржкрж╛ржи

рж╢рзБржзрзБ рж▓рж┐ржЦрзБржи ржЖржкржирж╛рж░ ржХрзА ржкрзНрж░ржпрж╝рзЛржЬржи!`,
    
    creditScore: `ЁЯУК ржЖржкржирж╛рж░ ржХрзНрж░рзЗржбрж┐ржЯ рж╕рзНржХрзЛрж░: {{score}}
ЁЯУЕ рж╕рж░рзНржмрж╢рзЗрж╖ ржЖржкржбрзЗржЯ: {{date}}
ЁЯУИ рж╕рзНржХрзЛрж░ рж░рзЗржЮрзНржЬ: 300-850

ржЖржкржирж╛рж░ рж╕рзНржХрзЛрж░ ржЙржирзНржиржд ржХрж░рждрзЗ:
тЬЕ рж╕ржоржпрж╝ржорждрзЛ ржмрж┐рж▓ ржкрж░рж┐рж╢рзЛржз ржХрж░рзБржи
тЬЕ ржХрзНрж░рзЗржбрж┐ржЯ ржмрзНржпржмрж╣рж╛рж░ ржХржо рж░рж╛ржЦрзБржи
тЬЕ ржЖрж░ржУ ржбрзЗржЯрж╛ рж╕рзЛрж░рзНрж╕ ржпрзЛржЧ ржХрж░рзБржи

ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржЬржирзНржп "рж╕ржорзНржкрзВрж░рзНржг рж░рж┐ржкрзЛрж░рзНржЯ" ржЯрж╛ржЗржк ржХрж░рзБржиред`,
    
    help: `тЭУ dbEasy рж╕рж╛рж╣рж╛ржпрзНржп ржУ рж╕рж╣рж╛ржпрж╝рждрж╛

ржЙржкрж▓ржмрзНржз ржХржорж╛ржирзНржб:
ЁЯУК "ржХрзНрж░рзЗржбрж┐ржЯ рж╕рзНржХрзЛрж░" - ржЖржкржирж╛рж░ рж╕рзНржХрзЛрж░ ржЪрзЗржХ ржХрж░рзБржи
ЁЯУЛ "рж░рж┐ржкрзЛрж░рзНржЯ" - рж╕ржорзНржкрзВрж░рзНржг ржХрзНрж░рзЗржбрж┐ржЯ рж░рж┐ржкрзЛрж░рзНржЯ ржкрж╛ржи
ЁЯФЧ "ржмрзНржпрж╛ржВржХ ржпрзЛржЧ ржХрж░рзБржи" - ржбрзЗржЯрж╛ рж╕рзЛрж░рзНрж╕ ржпрзЛржЧ ржХрж░рзБржи
ЁЯМР "рж╕рж╛рж╣рж╛ржпрзНржп" - ржПржЗ ржорзЗржирзБ ржжрзЗржЦрж╛ржи

ржЖрж░ржУ ржмрзИрж╢рж┐рж╖рзНржЯрзНржпрзЗрж░ ржЬржирзНржп: https://dbeasy.app ржнрж┐ржЬрж┐ржЯ ржХрж░рзБржи!`
  }
};

// Helper functions
async function handleCreditScoreRequest(phoneNumber: string, language: string): Promise<string> {
  // Fetch user's credit score from your database
  const score = await getUserCreditScore(phoneNumber);
  const template = messageTemplates[language]?.creditScore || messageTemplates.en.creditScore;
  
  return template
    .replace('{{score}}', score.toString())
    .replace('{{date}}', new Date().toLocaleDateString());
}

async function getUserCreditScore(phoneNumber: string): Promise<number> {
  // Mock implementation - replace with actual database query
  return Math.floor(Math.random() * (850 - 300) + 300);
}

function getWelcomeMessage(language: string): string {
  return messageTemplates[language]?.welcome || messageTemplates.en.welcome;
}

function getHelpMessage(language: string): string {
  return messageTemplates[language]?.help || messageTemplates.en.help;
}

async function handleDataSourceConnection(phoneNumber: string, dataSource: string, language: string): Promise<string> {
  return messageTemplates[language]?.dataSourceHelp || messageTemplates.en.dataSourceHelp;
}

async function handleReportRequest(phoneNumber: string, language: string): Promise<string> {
  // Generate secure link for full report
  const reportLink = `https://dbeasy.app/report/${phoneNumber}?token=${generateSecureToken()}`;
  
  const messages = {
    en: `ЁЯУЛ Your Credit Report is Ready!

ЁЯФТ Secure Link: ${reportLink}
тП░ Valid for: 24 hours
ЁЯУ▒ Access from: Any device

Your report includes:
тЬЕ Detailed credit score analysis
тЬЕ Payment history
тЬЕ Credit utilization
тЬЕ Recommendations for improvement

Link expires in 24 hours for security.`,
    
    hi: `ЁЯУЛ рдЖрдкрдХреА рдХреНрд░реЗрдбрд┐рдЯ рд░рд┐рдкреЛрд░реНрдЯ рддреИрдпрд╛рд░ рд╣реИ!

ЁЯФТ рд╕реБрд░рдХреНрд╖рд┐рдд рд▓рд┐рдВрдХ: ${reportLink}
тП░ рд╡реИрдз: 24 рдШрдВрдЯреЗ рдХреЗ рд▓рд┐рдП
ЁЯУ▒ рдПрдХреНрд╕реЗрд╕: рдХрд┐рд╕реА рднреА рдбрд┐рд╡рд╛рдЗрд╕ рд╕реЗ

рдЖрдкрдХреА рд░рд┐рдкреЛрд░реНрдЯ рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реИ:
тЬЕ рд╡рд┐рд╕реНрддреГрдд рдХреНрд░реЗрдбрд┐рдЯ рд╕реНрдХреЛрд░ рд╡рд┐рд╢реНрд▓реЗрд╖рдг
тЬЕ рднреБрдЧрддрд╛рди рдЗрддрд┐рд╣рд╛рд╕
тЬЕ рдХреНрд░реЗрдбрд┐рдЯ рдЙрдкрдпреЛрдЧ
тЬЕ рд╕реБрдзрд╛рд░ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ

рд╕реБрд░рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП рд▓рд┐рдВрдХ 24 рдШрдВрдЯреЗ рдореЗрдВ рд╕рдорд╛рдкреНрдд рд╣реЛ рдЬрд╛рддрд╛ рд╣реИред`,
    
    bn: `ЁЯУЛ ржЖржкржирж╛рж░ ржХрзНрж░рзЗржбрж┐ржЯ рж░рж┐ржкрзЛрж░рзНржЯ ржкрзНрж░рж╕рзНрждрзБржд!

ЁЯФТ ржирж┐рж░рж╛ржкржж рж▓рж┐ржВржХ: ${reportLink}
тП░ ржмрзИржз: 24 ржШржгрзНржЯрж╛рж░ ржЬржирзНржп
ЁЯУ▒ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕: ржпрзЗржХрзЛржирзЛ ржбрж┐ржнрж╛ржЗрж╕ ржерзЗржХрзЗ

ржЖржкржирж╛рж░ рж░рж┐ржкрзЛрж░рзНржЯрзЗ рж░ржпрж╝рзЗржЫрзЗ:
тЬЕ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржХрзНрж░рзЗржбрж┐ржЯ рж╕рзНржХрзЛрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг
тЬЕ ржкрзЗржорзЗржирзНржЯ ржЗрждрж┐рж╣рж╛рж╕
тЬЕ ржХрзНрж░рзЗржбрж┐ржЯ ржмрзНржпржмрж╣рж╛рж░
тЬЕ ржЙржирзНржирждрж┐рж░ рж╕рзБржкрж╛рж░рж┐рж╢

ржирж┐рж░рж╛ржкрждрзНрждрж╛рж░ ржЬржирзНржп рж▓рж┐ржВржХ 24 ржШржгрзНржЯрж╛ржпрж╝ ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖ред`
  };
  
  return messages[language] || messages.en;
}

async function handleLanguageChange(phoneNumber: string, language: string): Promise<string> {
  // Save user's language preference
  await saveUserLanguagePreference(phoneNumber, language);
  
  const confirmations = {
    en: "тЬЕ Language changed to English. How can I help you today?",
    hi: "тЬЕ рднрд╛рд╖рд╛ рд╣рд┐рдВрджреА рдореЗрдВ рдмрджрд▓ рджреА рдЧрдИ рд╣реИред рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?",
    bn: "тЬЕ ржнрж╛рж╖рж╛ ржмрж╛ржВрж▓рж╛ржпрж╝ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЖржЬ ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржХрзАржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?"
  };
  
  return confirmations[language] || confirmations.en;
}

function generateSecureToken(): string {
  return Math.random().toString(36).substring(2) + Date.now().toString(36);
}

async function saveUserLanguagePreference(phoneNumber: string, language: string): Promise<void> {
  // Mock implementation - replace with actual database update
  console.log(`Saved language preference: ${phoneNumber} -> ${language}`);
}
